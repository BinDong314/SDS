/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_db_2dmessage_2eprotoc__INCLUDED
#define PROTOBUF_C_db_2dmessage_2eprotoc__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _SDSMetadataDbKey SDSMetadataDbKey;
typedef struct _SdsFile SdsFile;
typedef struct _ReadCount ReadCount;
typedef struct _H5Hyperslab H5Hyperslab;
typedef struct _H5Eselection H5Eselection;
typedef struct _LayoutMetadataT LayoutMetadataT;
typedef struct _SDSMetadataDbValue SDSMetadataDbValue;


/* --- enums --- */

typedef enum _FileStatus {
  FILE_STATUS__IN_SERVICE = 0,
  FILE_STATUS__NOT_IN_SERVICE = 1
} FileStatus;

/* --- messages --- */

struct  _SDSMetadataDbKey
{
  ProtobufCMessage base;
  char *filename;
  char *group;
  char *dsetname;
  int32_t datatype;
  int32_t filetype;
};
#define SDS_METADATA_DB_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sds_metadata_db_key__descriptor) \
    , NULL, NULL, NULL, 0, 0 }


struct  _SdsFile
{
  ProtobufCMessage base;
  char *filename;
  char *group;
  char *dsetname;
  int32_t filetype;
  int32_t datatype;
  int32_t ir_type;
  protobuf_c_boolean has_cores;
  int32_t cores;
  char *parameters;
  protobuf_c_boolean has_create_time;
  int32_t create_time;
  protobuf_c_boolean has_io_pattern_type;
  int32_t io_pattern_type;
};
#define SDS_FILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sds_file__descriptor) \
    , NULL, NULL, NULL, 0, 0, 0, 0,0, NULL, 0,0, 0,0 }


struct  _ReadCount
{
  ProtobufCMessage base;
  int32_t interval_count;
  int32_t previous_interval;
  int32_t previous_400_interval;
  int32_t previous_10000_interval;
  int32_t life_time;
};
#define READ_COUNT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&read_count__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _H5Hyperslab
{
  ProtobufCMessage base;
  size_t n_start;
  uint64_t *start;
  size_t n_stride;
  uint64_t *stride;
  size_t n_count;
  uint64_t *count;
  size_t n_block;
  uint64_t *block;
};
#define H5_HYPERSLAB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&h5_hyperslab__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  _H5Eselection
{
  ProtobufCMessage base;
  size_t n_coordination;
  uint64_t *coordination;
};
#define H5_ESELECTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&h5_eselection__descriptor) \
    , 0,NULL }


struct  _LayoutMetadataT
{
  ProtobufCMessage base;
  int32_t pattern_type;
  size_t n_req_global_start;
  int64_t *req_global_start;
  size_t n_req_global_end;
  int64_t *req_global_end;
  size_t n_req_hyperslab;
  H5Hyperslab **req_hyperslab;
  H5Eselection *req_element;
  SdsFile *opt_file;
  FileStatus opt_file_status;
  size_t n_opt_hyperslab;
  H5Hyperslab **opt_hyperslab;
  int32_t linear_order;
  size_t n_chunk_size;
  int32_t *chunk_size;
};
#define LAYOUT_METADATA_T__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&layout_metadata_t__descriptor) \
    , 0, 0,NULL, 0,NULL, 0,NULL, NULL, NULL, 0, 0,NULL, 0, 0,NULL }


struct  _SDSMetadataDbValue
{
  ProtobufCMessage base;
  size_t n_index_file_status;
  FileStatus *index_file_status;
  size_t n_index_files;
  SdsFile **index_files;
  size_t n_reorg_file_status;
  FileStatus *reorg_file_status;
  size_t n_reorg_files;
  SdsFile **reorg_files;
  ReadCount *read_count;
  int32_t owner_id;
  int32_t group_id;
  int32_t owner_bit;
  int32_t group_bit;
  int32_t other_bit;
  FileStatus orig_file_status;
  size_t n_layout_metadata;
  LayoutMetadataT **layout_metadata;
};
#define SDS_METADATA_DB_VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sds_metadata_db_value__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, 0,NULL, NULL, 0, 0, 0, 0, 0, 0, 0,NULL }


/* SDSMetadataDbKey methods */
void   sds_metadata_db_key__init
                     (SDSMetadataDbKey         *message);
size_t sds_metadata_db_key__get_packed_size
                     (const SDSMetadataDbKey   *message);
size_t sds_metadata_db_key__pack
                     (const SDSMetadataDbKey   *message,
                      uint8_t             *out);
size_t sds_metadata_db_key__pack_to_buffer
                     (const SDSMetadataDbKey   *message,
                      ProtobufCBuffer     *buffer);
SDSMetadataDbKey *
       sds_metadata_db_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sds_metadata_db_key__free_unpacked
                     (SDSMetadataDbKey *message,
                      ProtobufCAllocator *allocator);
/* SdsFile methods */
void   sds_file__init
                     (SdsFile         *message);
size_t sds_file__get_packed_size
                     (const SdsFile   *message);
size_t sds_file__pack
                     (const SdsFile   *message,
                      uint8_t             *out);
size_t sds_file__pack_to_buffer
                     (const SdsFile   *message,
                      ProtobufCBuffer     *buffer);
SdsFile *
       sds_file__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sds_file__free_unpacked
                     (SdsFile *message,
                      ProtobufCAllocator *allocator);
/* ReadCount methods */
void   read_count__init
                     (ReadCount         *message);
size_t read_count__get_packed_size
                     (const ReadCount   *message);
size_t read_count__pack
                     (const ReadCount   *message,
                      uint8_t             *out);
size_t read_count__pack_to_buffer
                     (const ReadCount   *message,
                      ProtobufCBuffer     *buffer);
ReadCount *
       read_count__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   read_count__free_unpacked
                     (ReadCount *message,
                      ProtobufCAllocator *allocator);
/* H5Hyperslab methods */
void   h5_hyperslab__init
                     (H5Hyperslab         *message);
size_t h5_hyperslab__get_packed_size
                     (const H5Hyperslab   *message);
size_t h5_hyperslab__pack
                     (const H5Hyperslab   *message,
                      uint8_t             *out);
size_t h5_hyperslab__pack_to_buffer
                     (const H5Hyperslab   *message,
                      ProtobufCBuffer     *buffer);
H5Hyperslab *
       h5_hyperslab__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   h5_hyperslab__free_unpacked
                     (H5Hyperslab *message,
                      ProtobufCAllocator *allocator);
/* H5Eselection methods */
void   h5_eselection__init
                     (H5Eselection         *message);
size_t h5_eselection__get_packed_size
                     (const H5Eselection   *message);
size_t h5_eselection__pack
                     (const H5Eselection   *message,
                      uint8_t             *out);
size_t h5_eselection__pack_to_buffer
                     (const H5Eselection   *message,
                      ProtobufCBuffer     *buffer);
H5Eselection *
       h5_eselection__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   h5_eselection__free_unpacked
                     (H5Eselection *message,
                      ProtobufCAllocator *allocator);
/* LayoutMetadataT methods */
void   layout_metadata_t__init
                     (LayoutMetadataT         *message);
size_t layout_metadata_t__get_packed_size
                     (const LayoutMetadataT   *message);
size_t layout_metadata_t__pack
                     (const LayoutMetadataT   *message,
                      uint8_t             *out);
size_t layout_metadata_t__pack_to_buffer
                     (const LayoutMetadataT   *message,
                      ProtobufCBuffer     *buffer);
LayoutMetadataT *
       layout_metadata_t__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   layout_metadata_t__free_unpacked
                     (LayoutMetadataT *message,
                      ProtobufCAllocator *allocator);
/* SDSMetadataDbValue methods */
void   sds_metadata_db_value__init
                     (SDSMetadataDbValue         *message);
size_t sds_metadata_db_value__get_packed_size
                     (const SDSMetadataDbValue   *message);
size_t sds_metadata_db_value__pack
                     (const SDSMetadataDbValue   *message,
                      uint8_t             *out);
size_t sds_metadata_db_value__pack_to_buffer
                     (const SDSMetadataDbValue   *message,
                      ProtobufCBuffer     *buffer);
SDSMetadataDbValue *
       sds_metadata_db_value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sds_metadata_db_value__free_unpacked
                     (SDSMetadataDbValue *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*SDSMetadataDbKey_Closure)
                 (const SDSMetadataDbKey *message,
                  void *closure_data);
typedef void (*SdsFile_Closure)
                 (const SdsFile *message,
                  void *closure_data);
typedef void (*ReadCount_Closure)
                 (const ReadCount *message,
                  void *closure_data);
typedef void (*H5Hyperslab_Closure)
                 (const H5Hyperslab *message,
                  void *closure_data);
typedef void (*H5Eselection_Closure)
                 (const H5Eselection *message,
                  void *closure_data);
typedef void (*LayoutMetadataT_Closure)
                 (const LayoutMetadataT *message,
                  void *closure_data);
typedef void (*SDSMetadataDbValue_Closure)
                 (const SDSMetadataDbValue *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    file_status__descriptor;
extern const ProtobufCMessageDescriptor sds_metadata_db_key__descriptor;
extern const ProtobufCMessageDescriptor sds_file__descriptor;
extern const ProtobufCMessageDescriptor read_count__descriptor;
extern const ProtobufCMessageDescriptor h5_hyperslab__descriptor;
extern const ProtobufCMessageDescriptor h5_eselection__descriptor;
extern const ProtobufCMessageDescriptor layout_metadata_t__descriptor;
extern const ProtobufCMessageDescriptor sds_metadata_db_value__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_db_2dmessage_2eprotoc__INCLUDED */
